// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VendaPues.Backend.Data;

#nullable disable

namespace VendaPues.Backend.Migrations;

[DbContext(typeof(DataContext))]
partial class DataContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.8")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens", (string)null);
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Bank", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("Banks");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Category", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("Categories");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.City", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<int>("StateId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("StateId", "Name")
                    .IsUnique();

                b.ToTable("Cities");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Country", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("Countries");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Inventory", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<bool>("Count1Finish")
                    .HasColumnType("bit");

                b.Property<bool>("Count2Finish")
                    .HasColumnType("bit");

                b.Property<bool>("Count3Finish")
                    .HasColumnType("bit");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("Id");

                b.ToTable("Inventories");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.InventoryDetail", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<float>("Adjustment")
                    .HasColumnType("real");

                b.Property<decimal>("Cost")
                    .HasColumnType("decimal(18,2)");

                b.Property<float>("Count1")
                    .HasColumnType("real");

                b.Property<float>("Count2")
                    .HasColumnType("real");

                b.Property<float>("Count3")
                    .HasColumnType("real");

                b.Property<int>("InventoryId")
                    .HasColumnType("int");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<float>("Stock")
                    .HasColumnType("real");

                b.HasKey("Id");

                b.HasIndex("InventoryId");

                b.HasIndex("ProductId");

                b.ToTable("InventoryDetails");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Kardex", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<decimal>("AverageCost")
                    .HasColumnType("decimal(18,2)");

                b.Property<float>("Balance")
                    .HasColumnType("real");

                b.Property<decimal>("Cost")
                    .HasColumnType("decimal(18,2)");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<int>("KardexType")
                    .HasColumnType("int");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<float>("Quantity")
                    .HasColumnType("real");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.ToTable("Kardex");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.NewsArticle", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<string>("ImageUrl")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Summary")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.ToTable("NewsArticles");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Order", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<int>("OrderStatus")
                    .HasColumnType("int");

                b.Property<int>("OrderType")
                    .HasColumnType("int");

                b.Property<string>("Remarks")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Orders");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.OrderDetail", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Image")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<int>("OrderId")
                    .HasColumnType("int");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<float>("Quantity")
                    .HasColumnType("real");

                b.Property<string>("Remarks")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("OrderId");

                b.HasIndex("ProductId");

                b.ToTable("OrderDetails");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.OrderPayment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("BankId")
                    .HasColumnType("int");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<int>("OrderId")
                    .HasColumnType("int");

                b.Property<string>("Reference")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<decimal>("Value")
                    .HasColumnType("decimal(18,2)");

                b.HasKey("Id");

                b.HasIndex("BankId");

                b.HasIndex("OrderId");

                b.ToTable("OrderPayments");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Product", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<decimal>("Cost")
                    .HasColumnType("decimal(18,2)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<float>("DesiredProfit")
                    .HasColumnType("real");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(18,2)");

                b.Property<float>("Stock")
                    .HasColumnType("real");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("Products");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.ProductCategory", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("CategoryId")
                    .HasColumnType("int");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("ProductId");

                b.ToTable("ProductCategories");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.ProductImage", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Image")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.ToTable("ProductImages");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Purchase", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("Remarks")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("SupplierId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("SupplierId");

                b.ToTable("Purchases");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.PurchaseDetail", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<decimal>("Cost")
                    .HasColumnType("decimal(18,2)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Image")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<int>("PurchaseId")
                    .HasColumnType("int");

                b.Property<float>("Quantity")
                    .HasColumnType("real");

                b.Property<string>("Remarks")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.HasIndex("PurchaseId");

                b.ToTable("PurchaseDetails");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.State", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("CountryId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasIndex("CountryId", "Name")
                    .IsUnique();

                b.ToTable("States");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Supplier", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Address")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)");

                b.Property<int>("CityId")
                    .HasColumnType("int");

                b.Property<string>("ContactFirstName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("ContactLastName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("Document")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("Phone")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.Property<string>("SupplierName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("Id");

                b.HasIndex("CityId");

                b.HasIndex("SupplierName")
                    .IsUnique();

                b.ToTable("Suppliers");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.TemporalOrder", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<float>("Quantity")
                    .HasColumnType("real");

                b.Property<string>("Remarks")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.HasIndex("UserId");

                b.ToTable("TemporalOrders");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.TemporalPurchase", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<decimal>("Cost")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<float>("Quantity")
                    .HasColumnType("real");

                b.Property<string>("Remarks")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.HasIndex("UserId");

                b.ToTable("TemporalPurchases");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.User", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)");

                b.Property<int>("CityId")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Document")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("Photo")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<int>("UserType")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CityId");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.City", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.State", "State")
                    .WithMany("Cities")
                    .HasForeignKey("StateId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("State");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.InventoryDetail", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Inventory", "Inventory")
                    .WithMany("InventoryDetails")
                    .HasForeignKey("InventoryId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("InventoryDetails")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Inventory");

                b.Navigation("Product");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Kardex", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("Kardex")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Product");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Order", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.User", "User")
                    .WithMany("Orders")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.Navigation("User");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.OrderDetail", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Order", "Order")
                    .WithMany("OrderDetails")
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("OrderDetails")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Order");

                b.Navigation("Product");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.OrderPayment", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Bank", "Bank")
                    .WithMany("OrderPayments")
                    .HasForeignKey("BankId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.Order", "Order")
                    .WithMany("OrderPayments")
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Bank");

                b.Navigation("Order");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.ProductCategory", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Category", "Category")
                    .WithMany("ProductCategories")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("ProductCategories")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Category");

                b.Navigation("Product");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.ProductImage", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("ProductImages")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Product");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Purchase", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Supplier", "Supplier")
                    .WithMany("Purchases")
                    .HasForeignKey("SupplierId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Supplier");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.PurchaseDetail", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("PurchaseDetails")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.Purchase", "Purchase")
                    .WithMany("PurchaseDetails")
                    .HasForeignKey("PurchaseId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Product");

                b.Navigation("Purchase");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.State", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Country", "Country")
                    .WithMany("States")
                    .HasForeignKey("CountryId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Country");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Supplier", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.City", "City")
                    .WithMany("Suppliers")
                    .HasForeignKey("CityId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("City");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.TemporalOrder", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("TemporalOrders")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.User", "User")
                    .WithMany("TemporalOrders")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.Navigation("Product");

                b.Navigation("User");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.TemporalPurchase", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.Product", "Product")
                    .WithMany("TemporalPurchases")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("VendaPues.Shared.Entities.User", "User")
                    .WithMany("TemporalPurchases")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.Navigation("Product");

                b.Navigation("User");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.User", b =>
            {
                b.HasOne("VendaPues.Shared.Entities.City", "City")
                    .WithMany("Users")
                    .HasForeignKey("CityId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("City");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Bank", b =>
            {
                b.Navigation("OrderPayments");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Category", b =>
            {
                b.Navigation("ProductCategories");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.City", b =>
            {
                b.Navigation("Suppliers");

                b.Navigation("Users");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Country", b =>
            {
                b.Navigation("States");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Inventory", b =>
            {
                b.Navigation("InventoryDetails");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Order", b =>
            {
                b.Navigation("OrderDetails");

                b.Navigation("OrderPayments");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Product", b =>
            {
                b.Navigation("InventoryDetails");

                b.Navigation("Kardex");

                b.Navigation("OrderDetails");

                b.Navigation("ProductCategories");

                b.Navigation("ProductImages");

                b.Navigation("PurchaseDetails");

                b.Navigation("TemporalOrders");

                b.Navigation("TemporalPurchases");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Purchase", b =>
            {
                b.Navigation("PurchaseDetails");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.State", b =>
            {
                b.Navigation("Cities");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.Supplier", b =>
            {
                b.Navigation("Purchases");
            });

        modelBuilder.Entity("VendaPues.Shared.Entities.User", b =>
            {
                b.Navigation("Orders");

                b.Navigation("TemporalOrders");

                b.Navigation("TemporalPurchases");
            });
#pragma warning restore 612, 618
    }
}
